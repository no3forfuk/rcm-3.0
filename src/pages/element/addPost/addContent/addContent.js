const app = getApp()
Component({
    /**
     * ÁªÑ‰ª∂ÁöÑÂ±ûÊÄßÂàóË°®
     */
    properties: {},
    data: {
        selectMediaData: [{
            text: 'ÊèíÂÖ•ÂõæÁâá',
            handle: 'insertImage'
        }, {
            text: 'ÊèíÂÖ•ËßÜÈ¢ë',
            handle: 'insertVideo'
        },],
        keyboardHeight: 336,
        postContent: [{
            type: 'text', value: ''
        }],
        showSelectImgModal: false,
        emojis: ['üòÄ', 'üòÅ', 'üòÇ', 'ü§£', 'üòÜ', 'üòä', 'üòã', 'üòç', 'üòò', 'üòó', 'üòô', 'üôÇ', 'ü§ó', 'ü§©', 'ü§î', 'ü§®', 'üòê', 'üòë', 'üò∂', 'üôÑ', 'üòè', 'üò£', 'üò•', 'üòÆ', 'ü§ê', 'üòØ', 'üò™', 'üò´', 'üò¥', 'üòå', 'üòõ', 'üòù', 'ü§§', 'üòí', 'üòì', 'üòî', 'üòï', 'üôÉ', 'ü§ë', 'üò≤', 'üôÅ', 'üòñ', 'üòû', 'üòü', 'üò§', 'üò¢', 'üò≠', 'üò¶', 'üòß', 'üò®', 'üò©', 'ü§Ø', 'üò¨', 'üò∞', 'üò±', 'üò≥', 'ü§™', 'üòµ', 'üò°', 'üò†', 'ü§¨', 'üò∑', 'ü§í', 'ü§ï', 'ü§¢', 'ü§Æ', 'ü§ß', 'üòá', 'üëà', 'üëâ', '‚òù', 'üëÜ', 'üñï', 'üëá', '‚úå', 'ü§û', 'üññ', 'ü§ò', 'üñê', '‚úã', 'üëå', 'üëç', 'üëé', '‚úä', 'üëä', 'ü§õ', 'ü§ú', 'ü§ö', 'üëã', 'ü§ü', 'ü§†', 'ü§°', 'ü§•', 'ü§´', 'ü§≠', 'üßê', 'ü§ì', 'üòà', 'üëπ', 'üë∫', 'üíÄ', 'üëª', 'üëΩ', 'üëæ', 'ü§ñ', 'üí©', 'üò∫', 'üòπ', 'üòª', 'üòº', 'üòΩ', 'üôÄ', 'üòø', 'üë∂', 'üë¶', 'üë¥', 'üëµ', 'üëÆ', 'üïµ', 'üíÇ', 'üë∑', 'ü§¥', 'üë∏', 'üë≥', 'üßï', 'üßî', 'üë±', 'üë®', 'üë©', 'ü§µ', 'üë∞', 'ü§∞', 'ü§±', 'üëº', 'üéÖ', 'ü§∂', 'üßô', 'üßö', 'üßõ', 'üßú', 'üßù', 'üßû', 'üßü', 'üôç', 'üôé', 'üôÖ', 'üôÜ', 'üíÅ', 'üôã', 'üôá', 'ü§¶', 'ü§∑', 'üíÜ', 'üíá', 'üö∂', 'üèÉ', 'üíÉ', 'üï∫', 'üßñ', 'üßò', 'üï¥', 'üë´', 'üíè', 'üë®', 'üë©', 'üíë', 'üë®', 'üë©', 'üë™', 'ü§≥', 'üí™', '‚úç', 'üëè', 'üëê', 'üôå', 'ü§≤', 'üôè', 'ü§ù', 'üíÖ', 'üëÇ', 'üëÉ', 'üë£', 'üëÄ', 'üß†', 'üëÖ', 'üëÑ', 'üíã', 'üëì', 'üëî', 'üëï', 'üëñ', 'üß£', 'üß§', 'üß•', 'üß¶', 'üëó', 'üëò', 'üëô', 'üëö', 'üëõ', 'üëú', 'üëù', 'üéí', 'üëû', 'üëü', 'üë†', 'üë°', 'üë¢', 'üëë', 'üëí', 'üé©', 'üéì', 'üß¢', 'üíÑ', 'üíç', 'üåÇ'],
        emojiViewShow: false,
        currentText: 0,
        isKeyboardUp: false,
        cursorPosition: 0,
        openTextBold: false,
    },
    ready() {


    },
    methods: {
        //ÁÇπÂáªscrollViewÂèØËßÜÂå∫Âüü
        clickScrollView() {
            //1.ÂΩìËæìÂÖ•Ê°ÜÂºπËµ∑Êó∂ÔºåÊî∂Ëµ∑ËæìÂÖ•Ê°Ü
            if (this.data.isKeyboardUp) {
                this.slideDownMenu()
            } else {
                this.insertText()
            }
            //2.ÂΩìËæìÂÖ•Ê°ÜÊú™ÂºπËµ∑Êó∂ÔºåÂºπËµ∑ËæìÂÖ•Ê°Ü
            //2-1 ÊúÄÂêé‰∏Ä‰∏™ËæìÂÖ•Ê°ÜËé∑ÂèñÁÑ¶ÁÇπ Â¶ÇÊûúÊ≤°ÊúâÊúÄÂêé‰∏Ä‰∏™ËæìÂÖ•Ê°Ü ÂàôÊñ∞Âª∫‰∏Ä‰∏™ËæìÂÖ•Ê°ÜÂπ∂Ëé∑ÂèñÁÑ¶ÁÇπ
            //2-2 ‰ΩøËé∑ÂèñÁÑ¶ÁÇπÁöÑËæìÂÖ•Ê°ÜËøõÂÖ•ÂèØËßÜÂå∫Âüü
            //3.ÂΩìÁÇπÂáªÂèØËßÜÂå∫ÂüüÂÜÖÂ∑≤ÊúâÁöÑËæìÂÖ•Ê°ÜÊó∂ ÂΩìÂâçË¢´ÁÇπÂáªÁöÑËæìÂÖ•Ê°ÜËé∑ÂèñÁÑ¶ÁÇπ
            //3-1 ‰ΩøËé∑ÂèñÁÑ¶ÁÇπÁöÑËæìÂÖ•Ê°ÜËøõÂÖ•ÂèØËßÜÂå∫Âüü
            //4.ÂΩìÁÇπÂáªÂèØËßÜÂå∫ÂüüÂÖ∂‰ªñÁªÑ‰ª∂Êó∂ÔºåÊçïËé∑‰∫ã‰ª∂ Á¶ÅÊ≠¢Ëß¶ÂèëÁÇπÂáªscrollView‰∫ã‰ª∂
            //
        },
        //ÂºπËµ∑Â∫ïÈÉ® ËèúÂçï
        slideUpMenu() {
            var animation = wx.createAnimation({
                duration: 100,
                timingFunction: 'ease-out',
            })
            animation.translateY(-this.data.keyboardHeight).step()
            this.setData({
                ctrlAnimation: animation.export()
            })
            this.setData({
                isKeyboardUp: true
            })
        },
        //Êî∂Ëµ∑Â∫ïÈÉ® ËèúÂçï
        slideDownMenu() {
            var animation = wx.createAnimation({
                duration: 100,
                timingFunction: 'ease-out',
            })
            animation.translateY(0).step()
            this.setData({
                ctrlAnimation: animation.export()
            })
            this.setData({
                emojiViewShow: false,
                isKeyboardUp: false
            })
        },
        insertText() {
            const len = this.data.postContent.length
            const postContent = this.data.postContent
            if (len > 0) {
                let item = this.data.postContent[len - 1];
                if (item.type == 'text') {
                    item.focus = true
                    postContent[len - 1] = item
                    this.setData({
                        postContent: postContent
                    })
                } else {
                    this.setData({
                        postContent: [...this.data.postContent, {type: 'text', value: '', focus: true}]
                    })
                }
            } else {
                this.setData({
                    postContent: [...this.data.postContent, {type: 'text', value: '', focus: true}]
                })
            }
        },
        //ÊèíÂÖ•Hr
        insertHr() {
            this.slideDownMenu()
            const postContent = this.data.postContent
            for (let i = 0; i < postContent.length; i++) {
                if (postContent[i].type == 'text') {
                    postContent[i].focus = false
                }
            }
            this.setData({
                postContent: [...postContent, {type: 'hr', value: ''}]
            })
        },
        //ÊâìÂºÄEmojiÈÄâÊã©Ê°Ü
        openSelectEmoji() {
            if (this.data.emojiViewShow) {
                this.setData({
                    emojiViewShow: false
                })
                this.slideDownMenu()
            } else {
                if (this.data.isKeyboardUp) {
                    this.setData({
                        emojiViewShow: true
                    })
                } else {
                    this.setData({
                        emojiViewShow: true
                    })
                    this.slideUpMenu()
                }
            }
        },
        //ÈÄâÊã©emoji
        selectEmoji(e) {
            //1.ÈÄâÊã©ÊøÄÊ¥ªÁöÑËæìÂÖ•Ê°Ü
            const index = this.data.currentText
            let postContent = this.data.postContent
            let text = postContent[index].value
            const emoji = e.currentTarget.dataset.emoji
            text = text.slice(0, this.data.cursorPosition) + emoji + text.slice(this.data.cursorPosition)
            const emojiLength = emoji.length
            this.setData({
                cursorPosition: this.data.cursorPosition + emojiLength
            })
            postContent[index].value = text
            this.setData({
                postContent: postContent
            })
        },
        openSelectImages() {
            this.slideDownMenu()
            this.setData({
                showSelectImgModal: true
            })
        },
        closeSelectImgModal() {
            this.setData({
                showSelectImgModal: false
            })
        },
        menuItemHandle(e) {
            const item = e.detail.item
            this[item.handle]()
        },
        catchTextareaInput(e) {
            const index = e.currentTarget.dataset.index
            const postContent = this.data.postContent
            postContent[index].value = e.detail.value
            this.setData({
                postContent: postContent
            })
        },
        //ËæìÂÖ•Ê°ÜËÅöÁÑ¶‰πãÂêé
        catchTextareaFocus(e) {
            //0.ËÆæÁΩÆÂΩìÂâçËæìÂÖ•Ê°ÜËÅöÁÑ¶
            let item = e.currentTarget.dataset.item
            item.focus = true
            const postContent = this.data.postContent
            postContent[e.currentTarget.dataset.index] = item
            //1.ËÆæÁΩÆÂ∫ïÈÉ®ËèúÂçïÂºπËµ∑È´òÂ∫¶
            this.setData({
                keyboardHeight: e.detail.height || 336
            })
            //2.ÂºπËµ∑Â∫ïÈÉ®ËèúÂçï
            this.slideUpMenu()
            //3.ËÆ∞ÂΩïÂΩìÂâçÊøÄÊ¥ªÁöÑËæìÂÖ•Ê°Ü
            this.setData({
                postContent: postContent,
                emojiViewShow: false
            })
            if (e.currentTarget.dataset.item.blod) {
                this.setData({
                    openTextBold: true
                })
            } else {
                this.setData({
                    openTextBold: false
                })
            }
        },
        //ËæìÂÖ•Ê°Ü‰∏¢Â§±‰πãÂêé
        catchTextareaBlur(e) {
            //1.ÂΩìÂâçËæìÂÖ•Ê°ÜÁöÑfocusÂÄº‰∏∫false
            const postContent = this.data.postContent
            const item = e.currentTarget.dataset.item
            if (item.value.length == 0 && !this.data.emojiViewShow) {
                postContent.splice(e.currentTarget.dataset.index, 1)
                //2.Êî∂Ëµ∑Â∫ïÈÉ®ËèúÂçï
                this.slideDownMenu();
            } else {
                item.focus = false
                postContent[e.currentTarget.dataset.index] = item
            }
            this.setData({
                postContent: postContent
            })
            //3.ËÆ∞ÂΩïÂÖâÊ†á‰ΩçÁΩÆ
            this.setData({
                cursorPosition: e.detail.cursor,
                currentText: e.currentTarget.dataset.index,
            })
        },
        //ÊèíÂÖ•Ê†áÈ¢ò
        insertTitle() {
            this.setData({
                openTextBold: !this.data.openTextBold
            })
            if (this.data.openTextBold) {
                this.setData({
                    postContent: [...this.data.postContent, {type: 'text', value: '', focus: true, blod: true}]
                })
            } else {
                this.setData({
                    postContent: [...this.data.postContent, {type: 'text', value: '', focus: true, blod: false}]
                })
            }

        },
        //ÊèíÂÖ•ÂõæÁâá
        insertImage() {
            this.closeSelectImgModal()
            wx.chooseImage({
                success: res => {
                    for (let i = 0; i < res.tempFilePaths.length; i++) {
                        this.setData({
                            postContent: [...this.data.postContent, {
                                type: 'image',
                                src: res.tempFilePaths[i]
                            }]
                        })
                    }
                },
                fail: res => {
                    this.openSelectImages()
                }
            });
        },
        //ÊèíÂÖ•ËßÜÈ¢ë
        insertVideo() {
            this.closeSelectImgModal()
            wx.chooseVideo({
                success: res => {
                    this.setData({
                        postContent: [...this.data.postContent, {
                            type: 'video',
                            src: res.tempFilePath
                        }]
                    })
                },
                fail: res => {
                    this.openSelectImages()
                }
            })
        },
        scrollAddContent() {

        }
    }
})